// Block Swap Algo
import java.util.*; 
class Main{    
    public static void swap(int arr[], int a, int b, int r){ 
      0,1 //for(int i = 0 ; i < r ; i++){ //a=0,b=3,r=2
            int temp = arr[a + i]; 
            arr[a + i] = arr[b + i]; 
            arr[b + i] = temp; 
        } 
        } 
    public static void leftRotate(int arr[], int r){ 
        int n = arr.length;
        if(r == 0 || r == n) return;   
        int A = r; 
        int B = n - r;    
        while (A!= B){
            if(A < B){2<1 
                swap(arr, r-A, A+B-r, A);
                B= B - A ;}
            else{ 
                swap(arr, r-A, r, B);
                A = A- B;  } 
        }
        swap(arr, r-A, r, B);
    }
    public static void main(String[] args){ 
        Scanner s = new Scanner(System.in);
        System.out.println("Enter size of the array");
        int n = s.nextInt();
        int[] arr = new int[n];
        
        System.out.println("Enter elements of the array");
        for (int i = 0; i < n; i++) arr[i] = s.nextInt();
        
        System.out.println("Enter the number of rotations");
        int no_of_rotations = s.nextInt();
        
        leftRotate(arr, no_of_rotations); //ARR,2
        
        System.out.println("Array Elements after rotating : "); 
        for(int i = 0 ; i < n ; i++){   
            System.out.print(arr[i] + " "); 
        }
    }  
}


//Equilibrium
//o(n^2)
public class Main
{
    public static int equlibrium(int a[],int n)
    {
      int i,j,max = 0;
      for(i=0;i<n;i++)
      {
        int p_sum = a[i];
        for(j=0;j<i;j++)
        {
            p_sum = p_sum+a[j];
        }
        int s_sum = a[i];
        for(j=n-1;j>i;j--)
        {
            s_sum = s_sum+a[j];
        }
        if (p_sum == s_sum)
        max = Math.max(max, p_sum);
      }
      return max;
    }
	public static void main(String[] args) {
		int a[] = {-2,5,3,1,2,6,-4,2};
		int n = a.length;
		int res = equlibrium(a,n);
		System.out.println(res);
	}
}
//0(n)
public class Main
{
    public static int equlibrium(int a[],int n)
    {
      int i;
      int sum =0,max =0,p_sum=0;
      for( i=0;i<n;i++)
      {
          sum =sum+a[i];
      }
      for(i=0;i<n;i++)
      {
          p_sum +=a[i];
          if (p_sum == sum)
          max = Math.max(max,p_sum);
          sum = sum - a[i];
      }
      return max;
    }
	public static void main(String[] args) {
		int a[] = {-2, 3, 2, 0, 2, 3, -2};
		int n = a.length;
		int res = equlibrium(a,n);
		System.out.println(res);
	}
}



// Basic Euclidean Algorithm
import java.util.*;
class Main {
	public static int gcd(int a, int b)
	{
		if (b == 0)
			return b;

		return gcd( a, a % b);
	}
	public static void main(String[] args)
	{
		int a = 10, b = 15, g;
		g = gcd(a, b);
		System.out.println("GCD(" + a + " , " + b
						+ ") = " + g);
	}
}
//Extended Euclidean Algorithm
public class Main
{
	public static void main(String[] args) {
		int a=30,b=20,x=0,y=1;
		int c[] = new int[2];
		c[0]=a;
		c[1]=b;
		int result = gcd(a,b,x,y,c);
		System.out.println(result);
	}
	static int gcd(int a,int b,int x,int y,int c[])
	{
	    if (b==0)
	    {
	        int GCD = c[0]*x + c[1]*y;
	        System.out.println(GCD);
	        System.out.println(x+" "+y);
	        return a;
	    }
	    else
	    {
	     int q = a/b;
	     int r = a%b;
	     int t = x -(y*q);
	     
	     if(r!=0)
	     return gcd(b,r,y,t,c);
	     
	     else
	     return gcd(b,r,x,y,c);
	     
	    }
	}
}

// Karatsuba
import java.util.*;
public class Main
{
   public static long karatsuba(long x,long y)
    {
        if(x<10&&y<10)
        return x*y;
        long n=Math.max(String.valueOf(x).length(),String.valueOf(y).length());
        long n2=n/2;
        long a=x/(long)Math.pow(10,n2);
        long b=x%(long)Math.pow(10,n2);
        long c=y/(long)Math.pow(10,n2);
        long d=y%(long)Math.pow(10,n2);
     long ac=karatsuba(a,c);
     long bd=karatsuba(b,d);
     long ad_plus_bc=karatsuba(a+b,c+d)-ac-bd;
     long result=ac*(long)Math.pow(10,2*n2)+ad_plus_bc*(long)Math.pow(10,n2)+bd;
     return result;
     
    }
   
public static void main (String args[])
{
    Scanner sc=new Scanner(System.in);
    long x=sc.nextLong();
    long y=sc.nextLong();
    long product=karatsuba(x,y);
    System.out.println(product);
}
}

// Leaders in an array
import java.io.*;
public class LeadersInArray
{
	void printLeaders(int arr[], int size)
	{
		for (int i = 0; i < size; i++)
		{
			int j;
			for (j = i + 1; j < size; j++)
			{
				if (arr[i] <=arr[j])
					break;
			}
			if (j == size)
				System.out.print(arr[i] + " ");
		}
	}

	public static void main(String[] args)
	{
		LeadersInArray lead = new LeadersInArray();
		int arr[] = new int[]{16, 17, 4, 3, 5, 2};
		int n = arr.length;
		lead.printLeaders(arr, n);
	}
}
import java.io.*;
public class LeadersInArray
{
	void printLeaders(int arr[], int size)
	{
		int max_from_right = arr[size-1];

		System.out.print(max_from_right + " ");
	
		for (int i = size-2; i >= 0; i--)
		{
			if (max_from_right < arr[i])
			{		
			max_from_right = arr[i];
			System.out.print(max_from_right + " ");
			}
		}
	}

	public static void main(String[] args)
	{
		LeadersInArray lead = new LeadersInArray();
		int arr[] = new int[]{16, 17, 4, 3, 5, 2};
		int n = arr.length;
		lead.printLeaders(arr, n);
	}
}


// Lexicographically palindromic string
public class Main
{
	public static void main(String[] args) {
		String s = "malayalam";
	
	    int len = s.length();
	    int max = 26;
	    int freq[] = new int[max];
	    
	    // to find the frequency of each characters
	    
	    for(int i=0;i<len;i++)
	    freq[s.charAt(i)-'a']++;
	    
	    if(CanMakePalindrome(freq,max,len) == false)
	    {
	    System.out.println("No palindromic string");
	    System.exit(0);
	    }
	    
	    //code to reduce odd_count character 
	    String odd_str="";
	    for(int i=0;i<max;i++)
	    {
	        if(freq[i]%2!=0)
	        {
	            freq[i]--;
	            odd_str =odd_str + (char)(i+'a'); 
	        }
	    }
	    //code to create palindromic string
	    String f="",r="";
	    
	    for(int i=0;i<max;i++)
	    {
	        if(freq[i]!=0)
	        {
	        String temp = "";
	        char ch = (char) (i+'a');
	        for(int j=1;j<=freq[i]/2;j++)
	        {
	            temp = temp + ch;
	        }
	        f = f+temp;
	        r = temp+r;
	    }
	    }
	    System.out.println(f+odd_str+r);
	    
	}
	    public static boolean CanMakePalindrome(int freq[],int max,int len)
	    {
	    // code to check whether it is possible to palindromic string with the given string
	    
	    int odd_cnt=0;
	    for(int i=0;i<max;i++)
	    {
	        if(freq[i]%2!=0)
	        odd_cnt++;
	    }
	    if(len%2 == 0)
	    {
	        if(odd_cnt>0)
	        {
	            return false;
	        }
	        else
	        {
	            return true;
	        }
	            
	   }
	   else
	   {
	       if(odd_cnt!=1)
	       return false;
	   }
	    return true;    
	  }
}



// longest sequence in bit
class Main{
	static int flipBit(int a)
	{ int currLen = 0, prevLen = 0, maxLen = 0;
		while (a != 0)
		{
			if ((a & 1) == 1)
			{
				currLen++;}
			
			else if ((a & 1) == 0)
			{prevLen = (a & 2) == 0 ? 0 : currLen;

				currLen = 0;
			}
			maxLen = Math.max(prevLen + currLen, maxLen);
			a >>= 1;
		}
		return maxLen + 1;
	}
	public static void main(String[] args)
	{
		int n=13;
		System.out.println(flipBit(n));	
	}
}


// Majority Elements
// o(n^2)
public class Main
{
	public static void main(String[] args) {
	  int a[]={1,3,2,2,2,2,3};
	  int n=a.length;
	  majority(a,n);
	}
	public static void majority(int a[],int n)
	{
	    int max=0;
	    int index=0;
	    int count,i;
	    for(i=0;i<n;i++)
	    {
	        count=0;
	        for(int j=0;j<n;j++)
	        {
	            if (a[i]==a[j])
	            count++;
	        }
	        if(max<count)
	        {
	            max=count;
	            index=i;
	        }
	    }
	    if(max>(n/2))
	    System.out.println(a[index]);
	    else
	    System.out.println("No majority element");
	}
	        
}
// o(n log n)
import java.util.*;
public class Main
{
	public static void main(String[] args) {
	  int a[]={1,2,2,2,2};
	  int n=a.length;
	  majority(a,n);
	}
	public static void majority(int a[],int n)
	{
	    Arrays.sort(a);
	    int max=0;int index=0,count = 1,flag =0;
	    int temp = a[0];
	    int i;
	    for(i=1;i<n;i++)
	    {
	        if(a[i]==temp)
	        {
	            count++;
	        }
	        else{
	            temp =a[i];
	            count =1;
	        }
	        if(max<count)
	        {
	            max=count;
	            index = i;
	            if(max>(n/2))
	            {
	              flag =1;
	              break;
	            }
	        }
	        }
	        if(flag == 1)
	        System.out.println(a[index]);
	        else
	        System.out.println("No majority element");
	}
	        }
// o(n)
import java.util.*;
class Main {
    public static void main(String[] args) {
        int a[]={1,2,2,2,3};
        int n = a.length;
        findMajority(a,n);
    }
    public static void findMajority(int a[],int n)
    {
        int max=0,ele=0,f=1;
        int b[] = new int[n+1];
        Arrays.fill(b,0);
        int i;
        for(i=0;i<n;i++)
        b[a[i]]++;
        for(i=0;i<n;i++)
        {
            if (b[i]>(n/2)){
             ele = i;
             f=0;
             break;
            }
        }
        if(f==1)
            {
                System.out.println("No Majority element");
            }
        else
        System.out.println(ele);
    }
}


// maximum product subarray
import java.util.*;
class Main
{
public static void main (String[] args)
{
    int a[]={-1,-2,-6,0,-2,-8,-12};//{4},{0},{-2},{
    int max=a[0],m=a[0],min=a[0],temp=0;//max=4//m=4//min=4
    for(int i=1;i<7;i++)
    {
        if(a[i]>0)//(0>0)//(-2>0)//(6>0)
        {
            max=Math.max(a[i],max*a[i]);//max=(6,0*6)=6
            min=Math.min(a[i],min*a[i]);//min=(6,0)=6
        }
        else if(a[i]==0)//0==0
         max=min=0;//min=max=0
         else
        {
            temp=max;//0
            max=Math.max(a[i],min*a[i]);//max(-2,(0*-2))//max=0
            min=Math.min(a[i],temp*a[i]);//min(-2,0)//0
        }
        m=Math.max(m,max);//m=(4,0);m=(4,0)//m=(4,6)=6
    }
    System.out.println(m);
}
}

// max sum of hourglass in matrix
import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    Scanner s = new Scanner(System.in);
	    int r = s.nextInt();
	    int c = s.nextInt();
	    int sum = 0, max =0;
		int a[][] = new int[r][c];
		for(int i=0;i<r;i++)
		{
		    for(int j=0;j<c;j++)
		    {
		        a[i][j]=s.nextInt();
		    }
		}
		if (r<3 || c<3)
		{
		    System.exit(0);
		}
		for(int i =0;i< r-2;i++)
		{
		    for(int j=0;j< c-2;j++)
		    {
		        sum = (a[i][j]+a[i][i+1]+a[i][i+2])+(a[i+1][j+1])+(a[i+2][j]+a[i+2][j+1]+a[i+2][j+2]);
		        max = Math.max(max,sum);
		    }
		}
		System.out.println(max);
	}
}	

// swap two nibbles
class Main {
	
static int swapNibbles(int x)
{
	return ((x & 0x0F) << 4 | (x & 0xF0) >> 4);
}

public static void main(String arg[])
{
	int x = 100;
	System.out.print(swapNibbles(x));
}
}
